<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="/config/config.properties" />
    <!-- Root Context: defines shared resources visible to all other web components -->

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <constructor-arg>
            <bean class="com.zaxxer.hikari.HikariConfig">
                <!-- MySQL 새 드라이버 클래스로 업데이트 -->
                <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />

                <!-- MySQL JDBC URL 업데이트 (시간대 설정 포함) -->
                <property name="jdbcUrl" value="${spring.datasource.url}?serverTimezone=UTC" />

                <property name="username" value="${spring.datasource.username}" />
                <property name="password" value="${spring.datasource.password}" />

                <!-- 기존 HikariCP 설정 유지 -->
                <property name="maximumPoolSize" value="10" />
                <property name="idleTimeout" value="30000" />
                <property name="poolName" value="HikariPool" />
            </bean>
        </constructor-arg>
    </bean>

<!--    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
<!--        &lt;!&ndash;property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy"></property&ndash;&gt;-->
<!--        &lt;!&ndash;property name="url" value="jdbc:log4jdbc:mysql://localhost:3306/springbasic?useUnicode=true&amp;characterEncoding=utf8"></property&ndash;&gt;-->
<!--        <property name="driverClassName" value="${spring.datasource.driverClassname}"></property>-->
<!--        <property name="url" value="${spring.datasource.url}"></property>-->
<!--        <property name="username" value="${spring.datasource.username}"></property>-->
<!--        <property name="password" value="${spring.datasource.password}"></property>-->
<!--    </bean>-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation"  value="classpath:mybatis-config.xml"/>
        <property name="mapperLocations" value="classpath:mapper/**/*Mapper.xml"/>
    </bean>

    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg ref="sqlSessionFactory"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!-- 컴포넌트 스캔을 통한 컨트롤러 클래스 스캔 -->
    <context:component-scan base-package="com.jscd.app"/>

    <!-- 어노테이션 기반의 컨트롤러 활성화 -->
    <mvc:annotation-driven />
    <tx:annotation-driven/>

    <!--	이메일 인증 관련 빈 등록-->
    <bean id="mail" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com" />
        <property name="port" value="587" />
        <property name="username" value="${spring.email.username}" />
        <property name="password" value="${spring.email.password}" />
        <property name="javaMailProperties">
            <props>
                <prop key="mail.transport.protocol">smtp</prop>
                <prop key="mail.smtp.auth">true</prop>
                <!--    gmail의 경우 보안문제 업데이트로 인해 SSLSocketFactory를 추가해야 smtp 사용 가능.-->
                <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.debug">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.gmail.com</prop>
                <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
            </props>
        </property>
    </bean>

    <!-- MultipartResolver 설정 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="100000000" />
        <property name="maxInMemorySize" value="100000000" />
        <property name="defaultEncoding" value="utf-8" />
    </bean>


</beans>